[["index.html", "A Book 1 Hello World", " A Book Frida Gomam 1 Hello World Hi. Bye. "],["a-summary-of-interactive-chart.html", "2 A Summary of Interactive Chart 2.1 Introduction 2.2 Interactive Table 2.3 Interactive Graph 2.4 Reference", " 2 A Summary of Interactive Chart Yihan Chen library(DT) library(dygraphs) library(plotly) library(igraph) library(networkD3) library(tibble) library(visNetwork) library(d3heatmap) library(threejs) # remotes::install_github(&quot;dmurdoch/rgl&quot;) library(rgl) # must be installed from source library(maptools) library(maps) library(leaflet) # remotes::install_github(&quot;mattflor/chorddiag&quot;) library(chorddiag) # must be installed from source library(collapsibleTree) # remotes::install_github(&quot;jeromefroe/circlepackeR&quot;) library(circlepackeR) # must be installed from source # remotes::install_github(&quot;hrbrmstr/streamgraph&quot;) library(streamgraph) # must be installed from source 2.1 Introduction This is a cheat sheet to help you find the proper interactive visualization with your purpose using R. In this document, I included several visualization examples about how to creating an interactive table, scatter plots, network, maps, etc. 2.2 Interactive Table As shown below, we can create a interactive table with the help of package DT. In this interactive table, you can easily search certain data, sort data in one variable, show different number of rows. datatable(iris, options = list(pageLength = 5)) 2.3 Interactive Graph 2.3.1 Time Series The dygraph package offers zooming, hovering, minimaps and much more. You can also pull down the timeline below to select and view the data for specified times. dygraph(nhtemp, main = &quot;New Haven Temperatures&quot;) %&gt;% dyRangeSelector(dateWindow = c(&quot;1920-01-01&quot;, &quot;1960-01-01&quot;)) 2.3.2 Histograph plotly can help us create interactive histogram. When hovering over the histogram, we can see information such as the category and quantity of that data. Similarly, we can also select parts of the graph to look deeper. p &lt;- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = &quot;dodge&quot;) ggplotly(p) 2.3.3 Scatter and Bubble Plots plotly can also be used to create scatter and bubble plots. Here is an example. The same interaction can be realized here. data &lt;- read.csv(&quot;https://raw.githubusercontent.com/plotly/datasets/master/school_earnings.csv&quot;) data$State &lt;- as.factor(c(&#39;Massachusetts&#39;, &#39;California&#39;, &#39;Massachusetts&#39;, &#39;Pennsylvania&#39;, &#39;New Jersey&#39;, &#39;Illinois&#39;, &#39;Washington DC&#39;, &#39;Massachusetts&#39;, &#39;Connecticut&#39;, &#39;New York&#39;, &#39;North Carolina&#39;, &#39;New Hampshire&#39;, &#39;New York&#39;, &#39;Indiana&#39;, &#39;New York&#39;, &#39;Michigan&#39;, &#39;Rhode Island&#39;, &#39;California&#39;, &#39;Georgia&#39;, &#39;California&#39;, &#39;California&#39;)) fig &lt;- plot_ly(data, x = ~Women, y = ~Men, text = ~School, type = &#39;scatter&#39;, mode = &#39;markers&#39;, size = ~Gap, color = ~State, colors = &#39;Paired&#39;, #Choosing the range of the bubbles&#39; sizes: sizes = c(10, 50), marker = list(opacity = 0.5, sizemode = &#39;diameter&#39;)) fig &lt;- fig %&gt;% layout(title = &#39;Gender Gap in Earnings per University&#39;, xaxis = list(showgrid = FALSE), yaxis = list(showgrid = FALSE), showlegend = FALSE) fig 2.3.4 Interactive Network Graph We can also create interactive network graph. For example, if you can’t see one node clearly, you can just move that node, and that node and the nodes who connect with it will change accordingly, just as you moved it in the physical world! networkD3 and visNetwork can both realize this function. The difference is that you can selected nodes by id in the network drawn by visNetwork. # create a dataset: data &lt;- tibble( from=c(&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;K&quot;, &quot;A&quot;, &quot;M&quot;), to=c(&quot;B&quot;, &quot;E&quot;, &quot;F&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;Z&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;K&quot;) ) # Plot simpleNetwork(data, height=&quot;100px&quot;, width=&quot;100px&quot;) nodes &lt;- data.frame(id = 1:6, title = paste(&quot;node&quot;, 1:6), shape = c(&quot;dot&quot;, &quot;square&quot;), size = 10:15, color = c(&quot;darkgreen&quot;, &quot;darkred&quot;)) edges &lt;- data.frame(from = 1:5, to = c(5, 4, 6, 3, 3)) visNetwork(nodes, edges) %&gt;% visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) 2.3.5 Heatmaps we can also draw an interactive heatmap using d3heatmap. Here is an example, when you hover over data, it will show the row and column it belongs to and also the value of it. You can also select a rectangle of data to dive deeper into the data set. Besides, when you click on one column/row name, it will highlight the corresponding column/name. d3heatmap(mtcars, scale=&quot;column&quot;, colors=&quot;Blues&quot;) 2.3.6 3D Scatterplots threejs and rgl provides a way to show scatterplots in 3D. Typically, the input should be 3 vectors with same length representing x, y, z coordinate. You can drag the image to see the data from different angles. z &lt;- seq(-10, 10, 0.1) x &lt;- cos(z) y &lt;- sin(z) scatterplot3js(x, y, z, color=rainbow(length(z))) # This is to output a rgl plot in a rmarkdown document. setupKnitr() # Data: the iris data is provided by R data &lt;- iris # Add a new column with color mycolors &lt;- c(&#39;royalblue1&#39;, &#39;darkcyan&#39;, &#39;oldlace&#39;) data$color &lt;- mycolors[ as.numeric(data$Species) ] # Plot plot3d( x=data$`Sepal.Length`, y=data$`Sepal.Width`, z=data$`Petal.Length`, col = data$color, type = &#39;s&#39;, radius = .1, xlab=&quot;Sepal Length&quot;, ylab=&quot;Sepal Width&quot;, zlab=&quot;Petal Length&quot;) # To display in an R Markdown document: rglwidget() 2.3.7 Globe Plots With the help of threejs, we can also create globe plots. It is an interesting way to view data on globe way. data(world.cities, package=&quot;maps&quot;) cities &lt;- world.cities[order(world.cities$pop,decreasing=TRUE)[1:1000],] value &lt;- 100 * cities$pop / max(cities$pop) globejs(bg=&quot;black&quot;, lat=cities$lat, long=cities$long, value=value, rotationlat=-0.34, rotationlong=-0.38, fov=30) 2.3.8 Interactive Maps We can create interactive maps to observe data related to geographic distribution. It also offers zooming, hovering, minimaps and much more. # load example data (Fiji Earthquakes) + keep only 100 first lines data(quakes) quakes &lt;- head(quakes, 100) # Create a color palette with handmade bins. mybins &lt;- seq(4, 6.5, by=0.5) mypalette &lt;- colorBin( palette=&quot;RdYlBu&quot;, domain=quakes$mag, na.color=&quot;transparent&quot;, bins=mybins) # Prepare the text for the tooltip: mytext &lt;- paste( &quot;Depth: &quot;, quakes$depth, &quot;&lt;br/&gt;&quot;, &quot;Stations: &quot;, quakes$stations, &quot;&lt;br/&gt;&quot;, &quot;Magnitude: &quot;, quakes$mag, sep=&quot;&quot;) %&gt;% lapply(htmltools::HTML) # Final Map m &lt;- leaflet(quakes) %&gt;% addTiles() %&gt;% setView( lat=-27, lng=170 , zoom=4) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% addCircleMarkers(~long, ~lat, fillColor = ~mypalette(mag), fillOpacity = 0.7, color=&quot;white&quot;, radius=8, stroke=FALSE, label = mytext, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;13px&quot;, direction = &quot;auto&quot;) ) %&gt;% addLegend( pal=mypalette, values=~mag, opacity=0.9, title = &quot;Magnitude&quot;, position = &quot;bottomright&quot; ) m 2.3.9 Interactive Chord Diagram Chord diagram can be interactive too! When hovering on specific part of the diagram, the detailed information of that part will pop up and also it will hight the related part for you to observe more clearly. # Create dummy data m &lt;- matrix(c(10000, 5871, 6732, 2868, 1951, 5800, 2060, 6171, 8010, 7856, 8090, 7865, 1013, 990, 940, 4427), byrow = TRUE, nrow = 4, ncol = 4) # A vector of 4 colors for 4 groups haircolors &lt;- c(&quot;black&quot;, &quot;blonde&quot;, &quot;brown&quot;, &quot;red&quot;) dimnames(m) &lt;- list(have = haircolors, prefer = haircolors) groupColors &lt;- c(&quot;#000000&quot;, &quot;#FFDA89&quot;, &quot;#953844&quot;, &quot;#F24723&quot;) # Build the chord diagram: p &lt;- chorddiag(m, groupColors = groupColors, groupnamePadding = 40) p 2.3.10 Interactive Collapsible Reingold-Tilford Tree Diagrams Collapsible Reingold-Tilford Tree Diagram is another interesting interactive graph. When you click a node, its children will be expanded so you can get more detailed information. When you don’t want to see in detail, you can also collapse the lower level nodes. # Represent this tree: p &lt;- collapsibleTree( warpbreaks, c(&quot;wool&quot;, &quot;tension&quot;, &quot;breaks&quot;)) p 2.3.11 Interactive Circle Packing Circle packing is a kind of graph that help you learn more about the composition of the data. For example, how many of the students are taking math class, and among them, what is the distribution of sex. Note that it may be no graph shown in html file, but it should be fine when seen in rmd file. # create a nested data frame giving the info of a nested dataset: data &lt;- data.frame( root=rep(&quot;root&quot;, 30), group=c(rep(&quot;Math&quot;,13), rep(&quot;Physics&quot;,7), rep(&quot;Engineering&quot;,2), rep(&quot;Literature&quot;, 8)), subgroup= rep(letters[1:5], each=6), subsubgroup=rep(letters[1:3], 10), value=sample(seq(1:15), 15) ) # Change the format. This use the data.tree library. This library needs a column that looks like root/group/subgroup/..., so I build it # install.packages(&quot;data.tree&quot;) library(data.tree) data$pathString &lt;- paste(&quot;world&quot;, data$group, data$subgroup, data$subsubgroup, sep = &quot;/&quot;) population &lt;- as.Node(data) p &lt;- circlepackeR(population, size = &quot;value&quot;) p 2.3.12 Interactive Streamgraph streamgraph is a great tool to create interactive streamgraph. You can select a specific class to ocserve. Zooming, hovering, minimaps and much more also effective here. Note that it may be no graph shown in html file, but it should be fine when seen in rmd file. # Create data: data &lt;- data.frame( year=rep(seq(1993,2022) , each=10), name=rep(letters[1:10] , 30), value=sample( seq(0,1,0.0001) , 300) ) # Stream graph with a legend a = streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, height=&quot;300px&quot;, width=&quot;1000px&quot;) %&gt;% sg_legend(show=TRUE, label=&quot;names: &quot;) %&gt;% sg_fill_brewer(&quot;PuOr&quot;) a 2.4 Reference https://r-graph-gallery.com/bubble-map.html https://plotly.com/r/ https://bwlewis.github.io/rthreejs/ https://rstudio.github.io/leaflet/ http://christophergandrud.github.io/networkD3/ https://r-graph-gallery.com/3d_scatter_plot.html https://github.com/hrbrmstr/streamgraph https://r-graph-gallery.com/streamgraph.html https://cran.r-project.org/web/packages/rgl/vignettes/rgl.html https://r-graph-gallery.com/chord-diagram.html https://github.com/mattflor/chorddiag https://github.com/AdeelK93/collapsibleTree https://r-graph-gallery.com/network-interactive.html "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
